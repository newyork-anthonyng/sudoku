[{"/Users/anthonyng/Desktop/Sandbox/sudoku/src/App.js":"1","/Users/anthonyng/Desktop/Sandbox/sudoku/src/reportWebVitals.js":"2","/Users/anthonyng/Desktop/Sandbox/sudoku/src/api.js":"3","/Users/anthonyng/Desktop/Sandbox/sudoku/src/index.js":"4","/Users/anthonyng/Desktop/Sandbox/sudoku/src/Sudoku.js":"5","/Users/anthonyng/Desktop/Sandbox/sudoku/src/HomePage.js":"6","/Users/anthonyng/Desktop/Sandbox/sudoku/src/useAsyncHook.js":"7"},{"size":450,"mtime":1607206817072,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1606863550441,"results":"10","hashOfConfig":"9"},{"size":696,"mtime":1606863641730,"results":"11","hashOfConfig":"9"},{"size":500,"mtime":1606863550433,"results":"12","hashOfConfig":"9"},{"size":6421,"mtime":1607215198790,"results":"13","hashOfConfig":"9"},{"size":1165,"mtime":1607206929119,"results":"14","hashOfConfig":"9"},{"size":1767,"mtime":1607208588914,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1pwszn9",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/anthonyng/Desktop/Sandbox/sudoku/src/App.js",["33"],"/Users/anthonyng/Desktop/Sandbox/sudoku/src/reportWebVitals.js",[],["34","35"],"/Users/anthonyng/Desktop/Sandbox/sudoku/src/api.js",[],"/Users/anthonyng/Desktop/Sandbox/sudoku/src/index.js",[],["36","37"],"/Users/anthonyng/Desktop/Sandbox/sudoku/src/Sudoku.js",["38","39"],"import React from \"react\";\nimport classNames from \"classnames\";\nimport { io } from \"socket.io-client\";\nimport { useParams } from \"react-router-dom\";\nimport useAsync from \"./useAsyncHook\";\n\nfunction fetchGame(gameId) {\n  const GAME_URL = `http://localhost:3001/games/${gameId}`;\n  return fetch(GAME_URL)\n    .then((res) => res.json())\n    .then((res) => res.grid);\n}\n\nfunction updateBackend(gameId, selectedSquare) {\n  const GAME_URL = `http://localhost:3001/games/${gameId}`;\n  return fetch(GAME_URL, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(selectedSquare),\n  }).then((a) => a.json());\n}\n\nfunction NumberPicker(props) {\n  const handleClick = (number) => () => {\n    props.onSelect(number);\n  };\n\n  const containerClass = classNames(\"number-picker\", {\n    \"number-picker--disabled\": props.disabled,\n  });\n  const buttonClass = classNames(\"number-picker__button\", {\n    \"number-picker__button--disabled\": props.disabled,\n  });\n\n  return (\n    <div className={containerClass}>\n      <button className={buttonClass} onClick={handleClick(1)}>\n        1\n      </button>\n      <button className={buttonClass} onClick={handleClick(2)}>\n        2\n      </button>\n      <button className={buttonClass} onClick={handleClick(3)}>\n        3\n      </button>\n      <button className={buttonClass} onClick={handleClick(4)}>\n        4\n      </button>\n      <button className={buttonClass} onClick={handleClick(5)}>\n        5\n      </button>\n      <button className={buttonClass} onClick={handleClick(6)}>\n        6\n      </button>\n      <button className={buttonClass} onClick={handleClick(7)}>\n        7\n      </button>\n      <button className={buttonClass} onClick={handleClick(8)}>\n        8\n      </button>\n      <button className={buttonClass} onClick={handleClick(9)}>\n        9\n      </button>\n    </div>\n  );\n}\n\nfunction isSquareHighlighted(\n  { x: selectedSquareX, y: selectedSquareY } = {},\n  { x: currentSquareX, y: currentSquareY } = {}\n) {\n  return (\n    selectedSquareX === currentSquareX || selectedSquareY === currentSquareY\n  );\n}\n\nfunction Sudoku() {\n  const { gameId } = useParams();\n  const gridRef = React.useRef([]);\n\n  function createNewGrid(originalGrid, move) {\n    const newGrid = originalGrid.slice();\n    const { x: selectedRowIndex, y: selectedColumnIndex, value } = move;\n\n    const selectedRow = newGrid[selectedRowIndex].slice();\n\n    const newSquare = {\n      ...selectedRow[selectedColumnIndex],\n      value,\n    };\n    selectedRow[selectedColumnIndex] = newSquare;\n\n    newGrid[selectedRowIndex] = selectedRow;\n\n    return newGrid;\n  }\n\n  const socket = React.useRef();\n  React.useEffect(() => {\n    socket.current = io(\"ws://localhost:3001\");\n\n    socket.current.on(\"new_message\", handleSocketMessages);\n  }, []);\n\n  const [selectedSquare, setSelectedSquare] = React.useState();\n  const {\n    data: grid,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    run,\n    setData,\n  } = useAsync({\n    data: [{}],\n  });\n\n  const handleSocketMessages = (move) => {\n    const newGrid = createNewGrid(gridRef.current, move);\n\n    setData(newGrid);\n    gridRef.current = newGrid;\n  };\n\n  React.useEffect(() => {\n    run(fetchGame(gameId)).then((response) => {\n      gridRef.current = response;\n    });\n  }, []);\n\n  const handleNumberSelect = (number) => {\n    if (!selectedSquare) return;\n    if (selectedSquare.filled) return;\n\n    const newSquare = {\n      ...selectedSquare,\n      value: number,\n    };\n    const newGrid = createNewGrid(grid, newSquare);\n\n    setData(newGrid);\n    gridRef.current = newGrid;\n    updateBackend(gameId, newSquare);\n  };\n\n  const handleDeleteSelect = () => {\n    const newSquare = {\n      ...selectedSquare,\n      value: 0,\n    };\n    const newGrid = createNewGrid(grid, newSquare);\n\n    setData(newGrid);\n    gridRef.current = newGrid;\n    updateBackend(gameId, newSquare);\n  };\n\n  const handleEmptyCellClick = ({ x, y, filled }) => () => {\n    setSelectedSquare({ x, y, filled });\n  };\n\n  if (isIdle || isLoading) {\n    return <p>Loading game...</p>;\n  }\n\n  if (isError) {\n    return (\n      <div>\n        Something went wrong...<pre>{JSON.stringify(error)}</pre>\n      </div>\n    );\n  }\n\n  if (isSuccess) {\n    return (\n      <div className=\"container\">\n        {grid.map((row, rowIndex) => {\n          return (\n            <div className=\"row\" key={rowIndex}>\n              {row.map(({ value, filled, x, y }, cellIndex) => {\n                const isHighlighted = isSquareHighlighted(selectedSquare, {\n                  x,\n                  y,\n                });\n\n                const squareClass = classNames(\"square\", {\n                  \"square--highighted\": isHighlighted,\n                  \"square--selected\":\n                    selectedSquare &&\n                    x === selectedSquare.x &&\n                    y === selectedSquare.y,\n                });\n\n                const squareInputClass = classNames(\n                  \"square__input\",\n                  \"square__input--unfilled\",\n                  {\n                    \"square__input--filled-by-user\": value !== 0,\n                  }\n                );\n\n                return (\n                  <div className={squareClass} key={cellIndex}>\n                    {filled ? (\n                      <div\n                        className=\"square__input square__input--filled\"\n                        onClick={handleEmptyCellClick({ x, y, filled })}\n                      >\n                        {value}\n                      </div>\n                    ) : (\n                      <div\n                        className={squareInputClass}\n                        onClick={handleEmptyCellClick({ x, y, filled })}\n                      >\n                        {value || \" \"}\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n        <div>\n          <button\n            onClick={handleDeleteSelect}\n            disabled={\n              typeof selectedSquare === \"undefined\" || selectedSquare.filled\n            }\n          >\n            Delete\n          </button>\n        </div>\n        <NumberPicker\n          onSelect={handleNumberSelect}\n          disabled={\n            typeof selectedSquare === \"undefined\" || selectedSquare.filled\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default Sudoku;\n","/Users/anthonyng/Desktop/Sandbox/sudoku/src/HomePage.js",[],"/Users/anthonyng/Desktop/Sandbox/sudoku/src/useAsyncHook.js",[],{"ruleId":"40","severity":1,"message":"41","line":3,"column":50,"nodeType":"42","messageId":"43","endLine":3,"endColumn":54},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"44","replacedBy":"48"},{"ruleId":"46","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":105,"column":6,"nodeType":"52","endLine":105,"endColumn":8,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":132,"column":6,"nodeType":"52","endLine":132,"endColumn":8,"suggestions":"55"},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["56"],"no-negated-in-lhs",["57"],["56"],["57"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'handleSocketMessages'. Either include it or remove the dependency array.","ArrayExpression",["58"],"React Hook React.useEffect has missing dependencies: 'gameId' and 'run'. Either include them or remove the dependency array.",["59"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [handleSocketMessages]",{"range":"64","text":"65"},"Update the dependencies array to be: [gameId, run]",{"range":"66","text":"67"},[2798,2800],"[handleSocketMessages]",[3304,3306],"[gameId, run]"]