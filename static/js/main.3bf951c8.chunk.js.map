{"version":3,"sources":["useAsyncHook.js","Sudoku.js","HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["STATUS","idle","Symbol","pending","resolved","rejected","defaultInitialState","status","data","error","useAsync","initialState","initialStateRef","React","useRef","useReducer","s","a","current","safeSetState","dispatch","mounted","useLayoutEffect","useCallback","useSafeDispatch","run","promise","then","Error","setData","isIdle","isLoading","isError","isSuccess","updateBackend","gameId","selectedSquare","GAME_URL","process","fetch","method","headers","body","JSON","stringify","json","NumberPicker","props","handleClick","number","onSelect","containerClass","classNames","disabled","buttonClass","className","onClick","Sudoku","useParams","gridRef","createNewGrid","originalGrid","move","newGrid","slice","selectedRowIndex","x","selectedColumnIndex","y","value","selectedRow","newSquare","socket","useEffect","io","on","handleSocketMessages","useState","setSelectedSquare","grid","res","fetchGame","response","handleEmptyCellClick","filled","map","row","rowIndex","cellIndex","isHighlighted","selectedSquareX","selectedSquareY","currentSquareX","currentSquareY","isSquareHighlighted","squareClass","squareInputClass","NEW_GAME_URL","fetchNewGame","FETCH_STATUS","HomePage","fetchStatus","setFetchStatus","setGameId","id","to","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAmBA,IAAMA,EAAS,CACbC,KAAMC,OAAO,QACbC,QAASD,OAAO,WAChBE,SAAUF,OAAO,YACjBG,SAAUH,OAAO,aAEbI,EAAsB,CAC1BC,OAAQP,EAAOC,KACfO,KAAM,KACNC,MAAO,MAsDMC,MAnDf,SAAkBC,GAChB,IAAMC,EAAkBC,IAAMC,OAAN,2BACnBR,GACAK,IAHyB,EAMcE,IAAME,YAChD,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAMC,KACtBL,EAAgBM,SARY,0BAMrBX,EANqB,EAMrBA,OAAQC,EANa,EAMbA,KAAMC,EANO,EAMPA,MAKjBU,EAxCR,SAAyBC,GACvB,IAAMC,EAAUR,IAAMC,QAAO,GAO7B,OANAD,IAAMS,iBAAgB,WAGpB,OAFAD,EAAQH,SAAU,EAEX,kBAAOG,EAAQH,SAAU,KAC/B,IAEIL,IAAMU,aACX,WACMF,EAAQH,SACVE,EAAQ,WAAR,eAGJ,CAACA,IA0BkBI,CAXS,MAaxBC,EAAMZ,IAAMU,aAChB,SAACG,GACC,IAAKA,IAAYA,EAAQC,KACvB,MAAM,IAAIC,MAAJ,4DAMR,OADAT,EAAa,CAAEZ,OAAQP,EAAOG,UACvBuB,EAAQC,MACb,SAACnB,GAEC,OADAW,EAAa,CAAEX,OAAMD,OAAQP,EAAOI,WAC7BI,KAET,SAACC,GACCU,EAAa,CAAEZ,OAAQP,EAAOK,SAAUI,eAI9C,CAACU,IAGGU,EAAUhB,IAAMU,aAAY,SAACf,GAAD,OAAUW,EAAa,CAAEX,WAAS,CAClEW,IAGF,MAAO,CACLW,OAAQvB,IAAWP,EAAOC,KAC1B8B,UAAWxB,IAAWP,EAAOG,QAC7B6B,QAASzB,IAAWP,EAAOK,SAC3B4B,UAAW1B,IAAWP,EAAOI,SAC7BK,QACAD,OACAiB,MACAI,YCjEJ,SAASK,EAAcC,EAAQC,GAC7B,IAAMC,EAAQ,UAAMC,gDAAN,kBAA6CH,GAC3D,OAAOI,MAAMF,EAAU,CACrBG,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUR,KACpBT,MAAK,SAACV,GAAD,OAAOA,EAAE4B,UAGnB,SAASC,EAAaC,GACpB,IAAMC,EAAc,SAACC,GAAD,OAAY,WAC9BF,EAAMG,SAASD,KAGXE,EAAiBC,IAAW,gBAAiB,CACjD,0BAA2BL,EAAMM,WAE7BC,EAAcF,IAAW,wBAAyB,CACtD,kCAAmCL,EAAMM,WAG3C,OACE,sBAAKE,UAAWJ,EAAhB,UACE,wBAAQI,UAAWD,EAAaE,QAASR,EAAY,GAArD,eAGA,wBAAQO,UAAWD,EAAaE,QAASR,EAAY,GAArD,eAGA,wBAAQO,UAAWD,EAAaE,QAASR,EAAY,GAArD,eAGA,wBAAQO,UAAWD,EAAaE,QAASR,EAAY,GAArD,eAGA,wBAAQO,UAAWD,EAAaE,QAASR,EAAY,GAArD,eAGA,wBAAQO,UAAWD,EAAaE,QAASR,EAAY,GAArD,eAGA,wBAAQO,UAAWD,EAAaE,QAASR,EAAY,GAArD,eAGA,wBAAQO,UAAWD,EAAaE,QAASR,EAAY,GAArD,eAGA,wBAAQO,UAAWD,EAAaE,QAASR,EAAY,GAArD,kBA4LSS,MA5Kf,WAAmB,IACTtB,EAAWuB,cAAXvB,OACFwB,EAAU9C,IAAMC,OAAO,IAE7B,SAAS8C,EAAcC,EAAcC,GACnC,IAAMC,EAAUF,EAAaG,QAClBC,EAAoDH,EAAvDI,EAAwBC,EAA+BL,EAAlCM,EAAwBC,EAAUP,EAAVO,MAE/CC,EAAcP,EAAQE,GAAkBD,QAExCO,EAAS,2BACVD,EAAYH,IADF,IAEbE,UAMF,OAJAC,EAAYH,GAAuBI,EAEnCR,EAAQE,GAAoBK,EAErBP,EAGT,IAAMS,EAAS3D,IAAMC,SACrBD,IAAM4D,WAAU,WACdD,EAAOtD,QAAUwD,aAAGpC,+CAEpBkC,EAAOtD,QAAQyD,GAAG,cAAeC,KAChC,IA1Ba,MA4B4B/D,IAAMgE,WA5BlC,mBA4BTzC,EA5BS,KA4BO0C,EA5BP,OAsCZpE,EAAS,CACXF,KAAM,CAAC,MATDuE,EA9BQ,EA8BdvE,KACAC,EA/Bc,EA+BdA,MACAuB,EAhCc,EAgCdA,QACAF,EAjCc,EAiCdA,OACAC,EAlCc,EAkCdA,UACAE,EAnCc,EAmCdA,UACAR,EApCc,EAoCdA,IACAI,EArCc,EAqCdA,QAKI+C,EAAuB,SAACd,GAC5B,IAAMC,EAAUH,EAAcD,EAAQzC,QAAS4C,GAE/CjC,EAAQkC,GACRJ,EAAQzC,QAAU6C,GAGpBlD,IAAM4D,WAAU,WACdhD,EA1HJ,SAAmBU,GACjB,IAAME,EAAQ,UAAMC,gDAAN,kBAA6CH,GAC3D,OAAOI,MAAMF,GACVV,MAAK,SAACqD,GAAD,OAASA,EAAInC,UAClBlB,MAAK,SAACqD,GAAD,OAASA,EAAID,QAsHfE,CAAU9C,IAASR,MAAK,SAACuD,GAC3BvB,EAAQzC,QAAUgE,OAEnB,IAEH,IA2BMC,EAAuB,SAAC,GAAD,IAAGjB,EAAH,EAAGA,EAAGE,EAAN,EAAMA,EAAGgB,EAAT,EAASA,OAAT,OAAsB,WACjDN,EAAkB,CAAEZ,IAAGE,IAAGgB,aAG5B,OAAItD,GAAUC,EACL,gDAGLC,EAEA,0DACyB,8BAAMW,KAAKC,UAAUnC,QAK9CwB,EAEA,sBAAKsB,UAAU,YAAf,UACE,qBAAKA,UAAU,OAAf,SACGwB,EAAKM,KAAI,SAACC,EAAKC,GACd,OACE,qBAAKhC,UAAU,MAAf,SACG+B,EAAID,KAAI,WAA0BG,GAAe,IAAtCnB,EAAqC,EAArCA,MAAOe,EAA8B,EAA9BA,OAAQlB,EAAsB,EAAtBA,EAAGE,EAAmB,EAAnBA,EACtBqB,EAnHxB,WAGG,IAAD,yDAF6C,GAAxCC,EAEL,EAFExB,EAAuByB,EAEzB,EAFsBvB,EAEtB,yDAD2C,GAAtCwB,EACL,EADE1B,EAAsB2B,EACxB,EADqBzB,EAErB,OACEsB,IAAoBE,GAAkBD,IAAoBE,EA8GtBC,CAAoB1D,EAAgB,CACxD8B,IACAE,MAGI2B,EAAc3C,IAAW,SAAU,CACvC,qBAAsBqC,EACtB,mBACErD,GACA8B,IAAM9B,EAAe8B,GACrBE,IAAMhC,EAAegC,IAGnB4B,EAAmB5C,IACvB,gBACA,0BACA,CACE,gCAA2C,IAAViB,IAIrC,OACE,qBAAKd,UAAWwC,EAAhB,SACGX,EACC,qBACE7B,UAAU,sCACVC,QAAS2B,EAAqB,CAAEjB,IAAGE,IAAGgB,WAFxC,SAIGf,IAGH,qBACEd,UAAWyC,EACXxC,QAAS2B,EAAqB,CAAEjB,IAAGE,IAAGgB,WAFxC,SAIGf,GAAS,OAbkBmB,OAxBdD,QA+ChC,8BACE,wBACE/B,QAnFiB,WACzB,IAAMe,EAAS,2BACVnC,GADU,IAEbiC,MAAO,IAEHN,EAAUH,EAAcmB,EAAMR,GAEpC1C,EAAQkC,GACRJ,EAAQzC,QAAU6C,EAClB7B,EAAcC,EAAQoC,IA2EdlB,SAC4B,qBAAnBjB,GAAkCA,EAAegD,OAH5D,sBASF,cAACtC,EAAD,CACEI,SA3GmB,SAACD,GAC1B,GAAKb,IACDA,EAAegD,OAAnB,CAEA,IAAMb,EAAS,2BACVnC,GADU,IAEbiC,MAAOpB,IAEHc,EAAUH,EAAcmB,EAAMR,GAEpC1C,EAAQkC,GACRJ,EAAQzC,QAAU6C,EAClB7B,EAAcC,EAAQoC,KAgGhBlB,SAC4B,qBAAnBjB,GAAkCA,EAAegD,iBAlElE,G,yBC7KIa,EAAY,UAAM3D,gDAAN,cAClB,SAAS4D,IACP,OAAO3D,MAAM0D,GAActE,MAAK,SAACqD,GAAD,OAASA,EAAInC,UAG/C,IAAMsD,EAAe,CACnBlG,KAAMC,OAAO,QACbC,QAASD,OAAO,WAChBE,SAAUF,OAAO,YACjBG,SAAUH,OAAO,aAwCJkG,MArCf,WAAqB,IAAD,EACoBvB,mBAASsB,EAAalG,MAD1C,mBACXoG,EADW,KACEC,EADF,OAEUzB,qBAFV,mBAEX1C,EAFW,KAEHoE,EAFG,iDAIlB,4BAAAtF,EAAA,6DACEqF,EAAeH,EAAahG,SAD9B,SAGyB+F,IAHzB,OAGQhB,EAHR,OAIEqB,EAAUrB,EAASsB,IACnBF,EAAeH,EAAa/F,UAL9B,4CAJkB,sBAYlB,OAAIiG,IAAgBF,EAAalG,KAE7B,8BACE,wBAAQuD,QAfI,2CAeZ,wBAKF6C,IAAgBF,EAAahG,QAE7B,8BACE,uDAKFkG,IAAgBF,EAAa/F,SAE7B,8BACE,cAAC,IAAD,CAAUqG,GAAE,gBAAWtE,YAH7B,GCtBauE,MAff,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,iBAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,YCFKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnF,MAAK,YAAkD,IAA/CoF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3bf951c8.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction useSafeDispatch(dispatch) {\n  const mounted = React.useRef(false);\n  React.useLayoutEffect(() => {\n    mounted.current = true;\n\n    return () => (mounted.current = false);\n  }, []);\n\n  return React.useCallback(\n    (...args) => {\n      if (mounted.current) {\n        dispatch(...args);\n      }\n    },\n    [dispatch]\n  );\n}\nconst STATUS = {\n  idle: Symbol(\"idle\"),\n  pending: Symbol(\"pending\"),\n  resolved: Symbol(\"resolved\"),\n  rejected: Symbol(\"rejected\"),\n};\nconst defaultInitialState = {\n  status: STATUS.idle,\n  data: null,\n  error: null,\n};\n\nfunction useAsync(initialState) {\n  const initialStateRef = React.useRef({\n    ...defaultInitialState,\n    ...initialState,\n  });\n\n  const [{ status, data, error }, setState] = React.useReducer(\n    (s, a) => ({ ...s, ...a }),\n    initialStateRef.current\n  );\n\n  const safeSetState = useSafeDispatch(setState);\n\n  const run = React.useCallback(\n    (promise) => {\n      if (!promise || !promise.then) {\n        throw new Error(\n          `The argument passed to useAsync().run must be a promise.`\n        );\n      }\n\n      safeSetState({ status: STATUS.pending });\n      return promise.then(\n        (data) => {\n          safeSetState({ data, status: STATUS.resolved });\n          return data;\n        },\n        (error) => {\n          safeSetState({ status: STATUS.rejected, error });\n        }\n      );\n    },\n    [safeSetState]\n  );\n\n  const setData = React.useCallback((data) => safeSetState({ data }), [\n    safeSetState,\n  ]);\n\n  return {\n    isIdle: status === STATUS.idle,\n    isLoading: status === STATUS.pending,\n    isError: status === STATUS.rejected,\n    isSuccess: status === STATUS.resolved,\n    error,\n    data,\n    run,\n    setData,\n  };\n}\n\nexport default useAsync;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { io } from \"socket.io-client\";\nimport { useParams } from \"react-router-dom\";\nimport useAsync from \"./useAsyncHook\";\n\nfunction fetchGame(gameId) {\n  const GAME_URL = `${process.env.REACT_APP_API_URL}/games/${gameId}`;\n  return fetch(GAME_URL)\n    .then((res) => res.json())\n    .then((res) => res.grid);\n}\n\nfunction updateBackend(gameId, selectedSquare) {\n  const GAME_URL = `${process.env.REACT_APP_API_URL}/games/${gameId}`;\n  return fetch(GAME_URL, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(selectedSquare),\n  }).then((a) => a.json());\n}\n\nfunction NumberPicker(props) {\n  const handleClick = (number) => () => {\n    props.onSelect(number);\n  };\n\n  const containerClass = classNames(\"number-picker\", {\n    \"number-picker--disabled\": props.disabled,\n  });\n  const buttonClass = classNames(\"number-picker__button\", {\n    \"number-picker__button--disabled\": props.disabled,\n  });\n\n  return (\n    <div className={containerClass}>\n      <button className={buttonClass} onClick={handleClick(1)}>\n        1\n      </button>\n      <button className={buttonClass} onClick={handleClick(2)}>\n        2\n      </button>\n      <button className={buttonClass} onClick={handleClick(3)}>\n        3\n      </button>\n      <button className={buttonClass} onClick={handleClick(4)}>\n        4\n      </button>\n      <button className={buttonClass} onClick={handleClick(5)}>\n        5\n      </button>\n      <button className={buttonClass} onClick={handleClick(6)}>\n        6\n      </button>\n      <button className={buttonClass} onClick={handleClick(7)}>\n        7\n      </button>\n      <button className={buttonClass} onClick={handleClick(8)}>\n        8\n      </button>\n      <button className={buttonClass} onClick={handleClick(9)}>\n        9\n      </button>\n    </div>\n  );\n}\n\nfunction isSquareHighlighted(\n  { x: selectedSquareX, y: selectedSquareY } = {},\n  { x: currentSquareX, y: currentSquareY } = {}\n) {\n  return (\n    selectedSquareX === currentSquareX || selectedSquareY === currentSquareY\n  );\n}\n\nfunction Sudoku() {\n  const { gameId } = useParams();\n  const gridRef = React.useRef([]);\n\n  function createNewGrid(originalGrid, move) {\n    const newGrid = originalGrid.slice();\n    const { x: selectedRowIndex, y: selectedColumnIndex, value } = move;\n\n    const selectedRow = newGrid[selectedRowIndex].slice();\n\n    const newSquare = {\n      ...selectedRow[selectedColumnIndex],\n      value,\n    };\n    selectedRow[selectedColumnIndex] = newSquare;\n\n    newGrid[selectedRowIndex] = selectedRow;\n\n    return newGrid;\n  }\n\n  const socket = React.useRef();\n  React.useEffect(() => {\n    socket.current = io(process.env.REACT_APP_WEB_SOCKET_URL);\n\n    socket.current.on(\"new_message\", handleSocketMessages);\n  }, []);\n\n  const [selectedSquare, setSelectedSquare] = React.useState();\n  const {\n    data: grid,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    run,\n    setData,\n  } = useAsync({\n    data: [{}],\n  });\n\n  const handleSocketMessages = (move) => {\n    const newGrid = createNewGrid(gridRef.current, move);\n\n    setData(newGrid);\n    gridRef.current = newGrid;\n  };\n\n  React.useEffect(() => {\n    run(fetchGame(gameId)).then((response) => {\n      gridRef.current = response;\n    });\n  }, []);\n\n  const handleNumberSelect = (number) => {\n    if (!selectedSquare) return;\n    if (selectedSquare.filled) return;\n\n    const newSquare = {\n      ...selectedSquare,\n      value: number,\n    };\n    const newGrid = createNewGrid(grid, newSquare);\n\n    setData(newGrid);\n    gridRef.current = newGrid;\n    updateBackend(gameId, newSquare);\n  };\n\n  const handleDeleteSelect = () => {\n    const newSquare = {\n      ...selectedSquare,\n      value: 0,\n    };\n    const newGrid = createNewGrid(grid, newSquare);\n\n    setData(newGrid);\n    gridRef.current = newGrid;\n    updateBackend(gameId, newSquare);\n  };\n\n  const handleEmptyCellClick = ({ x, y, filled }) => () => {\n    setSelectedSquare({ x, y, filled });\n  };\n\n  if (isIdle || isLoading) {\n    return <p>Loading game...</p>;\n  }\n\n  if (isError) {\n    return (\n      <div>\n        Something went wrong...<pre>{JSON.stringify(error)}</pre>\n      </div>\n    );\n  }\n\n  if (isSuccess) {\n    return (\n      <div className=\"container\">\n        <div className=\"grid\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div className=\"row\" key={rowIndex}>\n                {row.map(({ value, filled, x, y }, cellIndex) => {\n                  const isHighlighted = isSquareHighlighted(selectedSquare, {\n                    x,\n                    y,\n                  });\n\n                  const squareClass = classNames(\"square\", {\n                    \"square--highighted\": isHighlighted,\n                    \"square--selected\":\n                      selectedSquare &&\n                      x === selectedSquare.x &&\n                      y === selectedSquare.y,\n                  });\n\n                  const squareInputClass = classNames(\n                    \"square__input\",\n                    \"square__input--unfilled\",\n                    {\n                      \"square__input--filled-by-user\": value !== 0,\n                    }\n                  );\n\n                  return (\n                    <div className={squareClass} key={cellIndex}>\n                      {filled ? (\n                        <div\n                          className=\"square__input square__input--filled\"\n                          onClick={handleEmptyCellClick({ x, y, filled })}\n                        >\n                          {value}\n                        </div>\n                      ) : (\n                        <div\n                          className={squareInputClass}\n                          onClick={handleEmptyCellClick({ x, y, filled })}\n                        >\n                          {value || \" \"}\n                        </div>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        <div>\n          <button\n            onClick={handleDeleteSelect}\n            disabled={\n              typeof selectedSquare === \"undefined\" || selectedSquare.filled\n            }\n          >\n            Delete\n          </button>\n        </div>\n        <NumberPicker\n          onSelect={handleNumberSelect}\n          disabled={\n            typeof selectedSquare === \"undefined\" || selectedSquare.filled\n          }\n        />\n      </div>\n    );\n  }\n}\n\nexport default Sudoku;\n","import React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nconst NEW_GAME_URL = `${process.env.REACT_APP_API_URL}/games/new`;\nfunction fetchNewGame() {\n  return fetch(NEW_GAME_URL).then((res) => res.json());\n}\n\nconst FETCH_STATUS = {\n  idle: Symbol(\"idle\"),\n  pending: Symbol(\"pending\"),\n  resolved: Symbol(\"resolved\"),\n  rejected: Symbol(\"rejected\"),\n};\n\nfunction HomePage() {\n  const [fetchStatus, setFetchStatus] = useState(FETCH_STATUS.idle);\n  const [gameId, setGameId] = useState();\n\n  async function handleNewGameClick() {\n    setFetchStatus(FETCH_STATUS.pending);\n\n    const response = await fetchNewGame();\n    setGameId(response.id);\n    setFetchStatus(FETCH_STATUS.resolved);\n  }\n\n  if (fetchStatus === FETCH_STATUS.idle) {\n    return (\n      <div>\n        <button onClick={handleNewGameClick}>New Game</button>\n      </div>\n    );\n  }\n\n  if (fetchStatus === FETCH_STATUS.pending) {\n    return (\n      <div>\n        <p>Creating new game...</p>\n      </div>\n    );\n  }\n\n  if (fetchStatus === FETCH_STATUS.resolved) {\n    return (\n      <div>\n        <Redirect to={`games/${gameId}`} />\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Sudoku from \"./Sudoku\";\nimport HomePage from \"./HomePage\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/games/:gameId\">\n          <Sudoku />\n        </Route>\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}